version: 2.1

executors:
  build_test:
    docker:
      - image: cimg/php:8.0
    working_directory: ~/workspace

  gce_deploy:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/workspace

commands:
  chmod_777:
    steps:
      - run:
          name: chmod 777 (directory permission adjustment)
          command: |
            chmod 777 -R storage
            chmod 777 -R bootstrap/cache

  composer_install:
    steps:
      - restore_cache:
          name: restore composer cache
          keys:
            - composer-cache-v1-{{ .Branch }}-{{ checksum "composer.lock" }}
      - run:
          name: composer install
          command: composer install -n --prefer-dist
      - save_cache:
          name: save composer cache
          key: composer-cache-v1-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ./vendor
      - run:
          name: clear laravel config
          command: php artisan config:clear
      - run:
          name: generate app key
          command: php artisan key:generate
  config_env_and_db:
    steps:
      - run:
          name: Configure PHP env (STG)
          command: |
            envsubst < .env.staging > .env
      - run:
          name: migrate database
          command: php artisan migrate

  gettext_install:
    steps:
      - run:
          name: gettext install
          command: apt-get install -qq -y gettext

  authorize_gcp:
    steps:
      - run:
          name: Google Authentication
          command: |
            echo $JSON_KEY_FILE > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
  build_docker_image:
    steps:
      - run:
          name: Docker build image
          command: |
            docker build \
              --file=dockers/Dockerfile \
              -t ${CIRCLE_PROJECT_REPONAME} .

  push_image_to_gcr:
    steps:
      - run:
          name: Docker push image to GCR
          command: |
            docker tag ${CIRCLE_PROJECT_REPONAME} gcr.io/${STG_GCP_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}-${CIRCLE_BUILD_NUM}
            docker push gcr.io/${STG_GCP_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}-${CIRCLE_BUILD_NUM}
            docker tag ${CIRCLE_PROJECT_REPONAME} gcr.io/${STG_GCP_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:latest
            docker push gcr.io/${STG_GCP_PROJECT_ID}/${CIRCLE_PROJECT_REPONAME}:latest

  deploy_cloud_run:
    steps:
      - run:
          name: Deploy Cloud Run
          command: |
            gcloud config set core/project ${STG_GCP_PROJECT_ID}
            envsubst < yaml_files/service.yaml > ./service.yaml
            gcloud run services replace service.yaml --region=asia-east1

jobs:
  checkout_code:
    parallelism: 1
    executor:
      name: build_test
    working_directory: ~/workspace
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ./*

  build:
    executor:
      name: build_test
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Configure PHP env
          command: cp .env.example .env
      - chmod_777
      - composer_install
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ./*

  test:
    executor:
      name: build_test
    working_directory: ~/workspace
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: phpcs
          command: |
            vendor/bin/phpcs --standard=PSR2  app
            vendor/bin/phpunit
          when: always

  deploy:
    executor:
      name: gce_deploy
    steps:
      - attach_workspace:
          at: ~/workspace
      - gettext_install
      - config_env_and_db
      - setup_remote_docker
      - authorize_gcp
      - build_docker_image
      - push_image_to_gcr
      - deploy_cloud_run

workflows:
  version: 2.1
  build-test-deploy:
    jobs:
      - checkout_code
      - build:
          requires:
            - checkout_code
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
            - build
          filters:
            branches:
              only:
                - master
